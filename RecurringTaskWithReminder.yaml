blueprint:
  name: Recurring Task with Reminders3
  description: >
    Sends a recurring notification at a user-defined time and date. 
    When triggered, a task is added to a selected to-do list, and a notification is sent to the user. 
    The notification includes an action to mark the task as done, which removes the to-do item. 
    If not removed, reminders are sent at the chosen interval until the task is done.
  domain: automation
  input:
    todo_list:
      name: To-do List
      description: The to-do list where the task should be created
      selector:
        entity:
          domain: todo
    todo_task_text:
      name: Task Name
      description: Label for the recurring task to be added to the to-do list
      selector:
        text: {}
    first_notification_date:
      name: First Notification Date
      description: The date when the first notification should be sent
      selector:
        date: {}
    task_interval_days:
      name: Task Interval (Days)
      description: Number of days between each task creation
      selector:
        number:
          min: 1
          max: 365
          unit_of_measurement: days
          mode: slider
    reminder_interval_minutes:
      name: Reminder Interval (Days)
      description: How often to remind if the task is not acknowledged
      selector:
        number:
          min: 1
          max: 28
          unit_of_measurement: days
          mode: slider
    notification_time:
      name: Notification Time
      description: Time of day to send the notification
      selector:
        time: {}
    notification_title:
      name: Notification Message
      description: The notification message text
      selector:
        text: {}
    notify_target:
      name: Mobile Device to Notify
      description: The mobile device to send the notification to
      selector:
        device:
          integration: mobile_app

variables:
  title: !input notification_title
  task_interval: !input task_interval_days
  reminder_interval: !input reminder_interval_minutes
  todo_entity: !input todo_list
  task_text: !input todo_task_text
  notify_target: !input notify_target
  action_id: "MARK_TASK_DONE_{{ task_text | slugify }}"
  task_found: false
  first_notification_date: !input first_notification_date
  is_first_date_reached: >
    {{ now().date() >= (first_notification_date | as_datetime).date() }}

trigger:
  - platform: time
    at: !input notification_time

#condition:
#  - alias: "check if automation is running"
#    condition: state
#    entity_id: "{{ this.entity_id }}"
#    state: "off"

mode: single

action:
  - variables:
      is_first_date_reached: >
        {{ now().date() >= (first_notification_date | as_datetime).date() }}
  - alias: "Check if today is on or after first_notification_date"
    condition: template
    value_template: "{{ is_first_date_reached }}"
  - alias: "Check if task already exists in the to-do list"
    service: todo.get_items
    data:
      entity_id: "{{ todo_entity }}"
      status: needs_action
    response_variable: todo_items_check

  - variables:
      task_already_exists: >
        {{ task_text in todo_items_check[todo_entity]['items'] | map(attribute='summary') | list }}

  - alias: "Add task if not already in the list"
    choose:
      - conditions: "{{ not task_already_exists }}"
        sequence:
          - service: todo.add_item
            data:
              item: "{{ task_text }}"
            target:
              entity_id: "{{ todo_entity }}"
  - alias: "Send initial notification with action"
    service: notify.mobile_app_{{ notify_target | device_attr('name') | lower | replace(' ', '_') }}
    data:
      title: "{{ title }}"
      message: "Task: {{ task_text }}. Tap to mark it as done."
      data:
        actions:
          - action: "{{action_id}}"
            title: "Done"
  # Initial timestamp when waiting starts
  - variables:
      wait_start_ts: "{{ now().timestamp() }}"
      wait_timeout_ts: "{{ wait_start_ts + (reminder_interval | int) * 86400 }}"
  - alias: "Wait for notification or task removal, with timeout"
    repeat:
      sequence:
        - variables:
            stop_condition: false

        # Wait for trigger with short timeout (polling interval)
        - wait_for_trigger:
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: "{{ action_id }}"
          timeout:
            seconds: 30
          continue_on_timeout: true
        - alias: "perform the action 1"
          choose:
            - conditions: "{{ wait.trigger.event.data.action == action_id }}"
              sequence:
                - alias: "Remove task when notification action tapped"
                  service: todo.remove_item
                  target:
                    entity_id: "{{ todo_entity }}"
                  data:
                    item: "{{ task_text }}"
                - variables:
                    stop_condition: true

        # Check current time
        - variables:
            current_ts: "{{ now().timestamp() }}"
            timeout_reached: "{{ current_ts >= wait_timeout_ts }}"

        # Exit if time is up
        - choose:
            - conditions: "{{ timeout_reached }}"
              sequence:
                - variables:
                    stop_condition: true

        # Get current to-do list items
        - service: todo.get_items
          data:
            entity_id: "{{ todo_entity }}"
            status: needs_action
          response_variable: todo_items_check

        # Check if task is still on the list
        - variables:
            task_still_exists: >
              {{ task_text in todo_items_check[todo_entity]['items'] | map(attribute='summary') | list }}

        # Exit if task was removed
        - choose:
            - conditions: "{{ not task_still_exists }}"
              sequence:
                - variables:
                    stop_condition: true

      # Continue loop only if trigger was not received
      while:
        - condition: template
          value_template: >
            {{ not stop_condition }}

  - alias: "get items1"
    service: todo.get_items
    data:
      entity_id: "{{todo_entity}}"
      status: needs_action
    response_variable: "todo_items1"
  - variables:
      task_found: >
        {{ task_text in todo_items1[todo_entity]['items'] | map(attribute='summary') | list }}
  - alias: "Repeat reminders until task is removed"
    repeat:
      while:
        - condition: template
          value_template: "{{task_found}}"
      sequence:
        - sequence:
            - service: notify.mobile_app_{{ notify_target | device_attr('name') | lower | replace(' ', '_') }}
              data:
                title: "{{ title }}"
                message: "Reminder: Task '{{ task_text }}' is still pending."
                data:
                  actions:
                    - action: "{{action_id}}"
                      title: "Done"
            - variables:
                wait_start_ts: "{{ now().timestamp() }}"
                wait_timeout_ts: "{{ wait_start_ts + (reminder_interval | int) * 86400 }}"
            - alias: "Wait for notification or task removal, with timeout"
              repeat:
                sequence:
                  - variables:
                      stop_condition: false

                  # Wait for trigger with short timeout (polling interval)
                  - wait_for_trigger:
                      - platform: event
                        event_type: mobile_app_notification_action
                        event_data:
                          action: "{{ action_id }}"
                    timeout:
                      seconds: 30
                    continue_on_timeout: true
                  - alias: "perform the action 1"
                    choose:
                      - conditions: "{{ wait.trigger.event.data.action == action_id }}"
                        sequence:
                          - alias: "Remove task when notification action tapped"
                            service: todo.remove_item
                            target:
                              entity_id: "{{ todo_entity }}"
                            data:
                              item: "{{ task_text }}"
                          - variables:
                              stop_condition: true

                  # Check current time
                  - variables:
                      current_ts: "{{ now().timestamp() }}"
                      timeout_reached: "{{ current_ts >= wait_timeout_ts }}"

                  # Exit if time is up
                  - choose:
                      - conditions: "{{ timeout_reached }}"
                        sequence:
                          - variables:
                              stop_condition: true

                  # Get current to-do list items
                  - service: todo.get_items
                    data:
                      entity_id: "{{ todo_entity }}"
                      status: needs_action
                    response_variable: todo_items_check

                  # Check if task is still on the list
                  - variables:
                      task_still_exists: >
                        {{ task_text in todo_items_check[todo_entity]['items'] | map(attribute='summary') | list }}

                  # Exit if task was removed
                  - choose:
                      - conditions: "{{ not task_still_exists }}"
                        sequence:
                          - variables:
                              stop_condition: true

                # Continue loop only if trigger was not received
                while:
                  - condition: template
                    value_template: >
                      {{ not stop_condition }}
            - alias: "get items1"
              service: todo.get_items
              data:
                entity_id: "{{todo_entity}}"
                status: needs_action
              response_variable: "todo_items2"
            - variables:
                task_found: >
                  {{ task_text in todo_items2[todo_entity]['items'] | map(attribute='summary') | list }}
  - variables:
      first_notification_date: >
        {{ (now() + timedelta(days=task_interval - 1)).strftime('%Y-%m-%d') }}
  - wait_template: "{{ now().date() >= (first_notification_date | as_datetime).date() }}"
