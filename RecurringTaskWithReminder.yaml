blueprint:
  name: Recurring Task with Time-Based Notifications and Reminders
  description: >
    Sends a recurring notification at a set time and date, and reminds the user at the defined frequency, if necessary. 
    Creates a task in a designated to-do list to track the open tasks. Allows the user to mark the task as done via 
    the notification or manually in the to-do list. Automatically schedules the next task date or reminder depending on user interaction.
  domain: automation
  input:
    todo_list:
      name: To-do List
      description: The to-do list where the task should be created
      selector:
        entity:
          domain: todo
    next_notification_tracker:
      name: Next Notification Tracker
      description: A Date helper that stores the next notification date
      selector:
        entity:
          domain: input_datetime
    next_reminder_tracker:
      name: Next Reminder Tracker
      description: A Date helper that stores the next reminder date
      selector:
        entity:
          domain: input_datetime
    todo_task_text:
      name: Task Name
      description: Label for the recurring task to be added to the to-do list
      selector:
        text: {}
    first_notification_date:
      name: First Notification Date
      description: The date when the first notification should be sent
      selector:
        date: {}
    task_interval_days:
      name: Task Interval (Days)
      description: Number of days between each task creation
      selector:
        number:
          min: 1
          max: 365
          unit_of_measurement: days
          mode: slider
    reminder_interval_days:
      name: Reminder Interval (Days)
      description: How often to remind if the task is not acknowledged
      selector:
        number:
          min: 1
          max: 28
          unit_of_measurement: days
          mode: slider
    wait_for_response_minutes:
      name: Wait for Response Duration (Minutes)
      description: How long to wait for the userâ€™s response before clearing until the next reminder is due (max 4 hours)
      selector:
        number:
          min: 1
          max: 240 # max 4 hours
          unit_of_measurement: minutes
          mode: slider
    notification_time:
      name: Notification Time
      description: Time of day to send the notification
      selector:
        time: {}
    notification_title:
      name: Notification Title
      description: The notification message text
      selector:
        text: {}
    notify_target:
      name: Mobile Device to Notify
      description: The mobile device to send the notification to
      selector:
        device:
          integration: mobile_app

variables:
  title: !input notification_title
  task_interval: !input task_interval_days
  reminder_interval: !input reminder_interval_days
  todo_entity: !input todo_list
  task_text: !input todo_task_text
  notify_target: !input notify_target
  action_id: "MARK_TASK_DONE_{{ task_text | slugify }}"
  first_notification_date: !input first_notification_date
  notification_time: !input notification_time
  next_notification_tracker: !input next_notification_tracker
  next_reminder_tracker: !input next_reminder_tracker
  wait_for_response_minutes: !input wait_for_response_minutes

trigger:
  - platform: time
    at: !input notification_time
  - platform: state
    entity_id: !input todo_list

condition:
  - condition: template
    value_template: >
      {% if trigger.platform == 'time' %}
        {% set first_dt = first_notification_date | as_datetime %}
        {% set next_dt = states(next_notification_tracker) | as_datetime %}
        {% set reminder_dt = states(next_reminder_tracker) | as_datetime %}
        {% set latest_dt = [first_dt, next_dt, reminder_dt] | max %}
        {{ now().date() == latest_dt.date() }}
      {% else %}
        true
      {% endif %}

action:
  - alias: "Ensure next_notification_tracker aligns with first_notification_date"
    variables:
      first_notification_dt: "{{ first_notification_date | as_datetime }}"
      next_notification_dt: "{{ states(next_notification_tracker) | as_datetime }}"
  - choose:
      - conditions: "{{ next_notification_dt.date() < first_notification_dt.date() }}"
        sequence:
          - service: input_datetime.set_datetime
            target:
              entity_id: "{{ next_notification_tracker }}"
            data:
              date: "{{ first_notification_date }}"

  - alias: "Check if task exists in the to-do list"
    service: todo.get_items
    data:
      entity_id: "{{ todo_entity }}"
      status: needs_action
    response_variable: todo_items

  - variables:
      task_exists: >
        {{ task_text in todo_items[todo_entity]['items'] | map(attribute='summary') | list }}

  - alias: "Handle manual task completion"
    choose:
      - conditions: >
          {{ (not task_exists) and 
             (states(next_notification_tracker) | as_datetime).date() < now().date() }}
        sequence:
          - alias: "Task was completed manually, schedule next notification"
            service: input_datetime.set_datetime
            target:
              entity_id: "{{ next_notification_tracker }}"
            data:
              date: >
                {{ (now() + timedelta(days=task_interval)).strftime('%Y-%m-%d') }}
          - stop: "Stop automation since task was completed manually."
  - alias: "Stop if not time trigger"
    choose:
      - conditions: >
          {{ not (trigger.platform == 'time') }}
        sequence:
          - stop: "Stop automation since time is not due."
  - alias: "Add task if not present"
    choose:
      - conditions: "{{ not task_exists }}"
        sequence:
          - service: todo.add_item
            data:
              item: "{{ task_text }}"
            target:
              entity_id: "{{ todo_entity }}"

  - alias: "Send notification with action button"
    service: notify.mobile_app_{{ notify_target | device_attr('name') | lower | replace(' ', '_') }}
    data:
      title: "{{ title }}"
      message: "Task: {{ task_text }}. Tap to mark it as done."
      data:
        tag: "{{ task_text }}"
        actions:
          - action: "{{ action_id }}"
            title: "Done"

  - alias: "Wait for response window"
    wait_for_trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          tag: "{{ task_text }}"
          action: "{{ action_id }}"
    timeout:
      minutes: "{{ wait_for_response_minutes }}"
    continue_on_timeout: true

  - choose:
      - conditions: "{{ wait.trigger and wait.trigger.event.data.action == action_id }}"
        sequence:
          - alias: "Remove task from to-do list"
            service: todo.remove_item
            target:
              entity_id: "{{ todo_entity }}"
            data:
              item: "{{ task_text }}"
          - alias: "Schedule next notification"
            service: input_datetime.set_datetime
            target:
              entity_id: "{{ next_notification_tracker }}"
            data:
              date: >
                {{ (now() + timedelta(days=task_interval)).strftime('%Y-%m-%d') }}

  - choose:
      - conditions: "{{ not wait.trigger }}"
        sequence:
          - alias: "Schedule next reminder"
            service: input_datetime.set_datetime
            target:
              entity_id: "{{ next_reminder_tracker }}"
            data:
              date: >
                {{ (now() + timedelta(days=reminder_interval)).strftime('%Y-%m-%d') }}
          - alias: "remove notifcation"
            service:
              notify.mobile_app_{{ notify_target | device_attr('name') | lower
              | replace(' ', '_') }}
            data:
              message: clear_notification
              data:
                tag: "{{ task_text }}"

mode: single
